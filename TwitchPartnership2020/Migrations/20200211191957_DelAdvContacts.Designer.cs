// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TwitchPartnership2020.Data;

namespace TwitchPartnership2020.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200211191957_DelAdvContacts")]
    partial class DelAdvContacts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TwitchPartnership2020.Models.Advertiser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthID")
                        .HasColumnType("int");

                    b.Property<string>("Contacts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurseID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AuthID");

                    b.HasIndex("PurseID");

                    b.ToTable("Advertiser");
                });

            modelBuilder.Entity("TwitchPartnership2020.Models.Appeal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Change_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Create_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModeratorID")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("StreamID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("ViewID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ModeratorID");

                    b.HasIndex("StreamID");

                    b.HasIndex("ViewID");

                    b.ToTable("Appeal");
                });

            modelBuilder.Entity("TwitchPartnership2020.Models.Auth", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Auth");
                });

            modelBuilder.Entity("TwitchPartnership2020.Models.Banner", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Delay")
                        .HasColumnType("int");

                    b.Property<bool>("IsContentsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Banner");
                });

            modelBuilder.Entity("TwitchPartnership2020.Models.Content", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvertiserID")
                        .HasColumnType("int");

                    b.Property<int>("Budget")
                        .HasColumnType("int");

                    b.Property<int>("CostPerAuthView")
                        .HasColumnType("int");

                    b.Property<int>("CostPerClick")
                        .HasColumnType("int");

                    b.Property<int>("CostPerView")
                        .HasColumnType("int");

                    b.Property<string>("MediaContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsedBudget")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AdvertiserID");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("TwitchPartnership2020.Models.Moderator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthID")
                        .HasColumnType("int");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurseID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AuthID");

                    b.HasIndex("PurseID");

                    b.ToTable("Moderator");
                });

            modelBuilder.Entity("TwitchPartnership2020.Models.Operation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurseID")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<int>("Summ")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PurseID");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("TwitchPartnership2020.Models.Purse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentBalance")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UnconfirmedBalance")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Purse");
                });

            modelBuilder.Entity("TwitchPartnership2020.Models.Redirect", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentID")
                        .HasColumnType("int");

                    b.Property<int>("Fingerprint")
                        .HasColumnType("int");

                    b.Property<DateTime>("RedirectTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StreamID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContentID");

                    b.HasIndex("StreamID");

                    b.ToTable("Redirect");
                });

            modelBuilder.Entity("TwitchPartnership2020.Models.Stream", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChannelsURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Duration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("StreamerID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Stream");
                });

            modelBuilder.Entity("TwitchPartnership2020.Models.Streamer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthID")
                        .HasColumnType("int");

                    b.Property<int>("BannerID")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurseID")
                        .HasColumnType("int");

                    b.Property<string>("TwitchURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AuthID");

                    b.HasIndex("BannerID")
                        .IsUnique();

                    b.HasIndex("PurseID");

                    b.ToTable("Streamers");
                });

            modelBuilder.Entity("TwitchPartnership2020.Models.Thematics", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descrition")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Thematic");
                });

            modelBuilder.Entity("TwitchPartnership2020.Models.View", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthViewers")
                        .HasColumnType("int");

                    b.Property<int>("BannerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Platform")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("StreamID")
                        .HasColumnType("int");

                    b.Property<int>("Viewers")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("View");
                });

            modelBuilder.Entity("TwitchPartnership2020.Models.Advertiser", b =>
                {
                    b.HasOne("TwitchPartnership2020.Models.Auth", "Auth")
                        .WithMany()
                        .HasForeignKey("AuthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitchPartnership2020.Models.Purse", "Purse")
                        .WithMany()
                        .HasForeignKey("PurseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitchPartnership2020.Models.Appeal", b =>
                {
                    b.HasOne("TwitchPartnership2020.Models.Moderator", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitchPartnership2020.Models.Stream", "Stream")
                        .WithMany()
                        .HasForeignKey("StreamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitchPartnership2020.Models.View", "View")
                        .WithMany()
                        .HasForeignKey("ViewID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitchPartnership2020.Models.Content", b =>
                {
                    b.HasOne("TwitchPartnership2020.Models.Advertiser", "Advertiser")
                        .WithMany("Contents")
                        .HasForeignKey("AdvertiserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitchPartnership2020.Models.Moderator", b =>
                {
                    b.HasOne("TwitchPartnership2020.Models.Auth", "Auth")
                        .WithMany()
                        .HasForeignKey("AuthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitchPartnership2020.Models.Purse", "Purse")
                        .WithMany()
                        .HasForeignKey("PurseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitchPartnership2020.Models.Operation", b =>
                {
                    b.HasOne("TwitchPartnership2020.Models.Purse", "Purse")
                        .WithMany()
                        .HasForeignKey("PurseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitchPartnership2020.Models.Redirect", b =>
                {
                    b.HasOne("TwitchPartnership2020.Models.Content", "Content")
                        .WithMany()
                        .HasForeignKey("ContentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitchPartnership2020.Models.Stream", "Stream")
                        .WithMany()
                        .HasForeignKey("StreamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitchPartnership2020.Models.Streamer", b =>
                {
                    b.HasOne("TwitchPartnership2020.Models.Auth", "Auth")
                        .WithMany()
                        .HasForeignKey("AuthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitchPartnership2020.Models.Banner", "Banner")
                        .WithOne("Streamer")
                        .HasForeignKey("TwitchPartnership2020.Models.Streamer", "BannerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitchPartnership2020.Models.Purse", "Purse")
                        .WithMany()
                        .HasForeignKey("PurseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
